AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Express API Gateway and Lambda Function, with EventBridge

Parameters:
  UploadImageBucket:
    Type: String
    Description: "S3 Bucket for storing files"

  ImageChallengeNotificationTopic:
    Type: String
    Description: "Arn of SNS Topic for uploaded image & corresponding challenge notifications"

  SNSCompleteChallengeTopic:
    Type: String
    Description: "SNS Topic for complete challenge notifications"

  SNSPlatformApplication:
    Type: String
    Description: "SNS Platform Application Arn for sending push notifications"

  ChallengeGenerationFunctionArn:
    Type: String
    Description: "Arn of Lambda function for generating challenges"

Resources:
  ExpressApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      BinaryMediaTypes: ["*/*"]

  ExpressFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ExpressFunctionServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ExpressFunctionS3Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${UploadImageBucket}/*

        - PolicyName: ExpressFunctionSNSPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                  - sns:CreatePlatformEndpoint
                Resource: 
                - !Ref ImageChallengeNotificationTopic
                - !Ref SNSCompleteChallengeTopic
                - !Ref SNSPlatformApplication

        - PolicyName: ExpressFunctionLambdaInvokePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Ref ChallengeGenerationFunctionArn


  ExpressFunctionResetChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: challengeReset.handler
      Runtime: nodejs14.x
      MemorySize: 512
      Role: !GetAtt ExpressFunctionRole.Arn
      Environment:
        Variables:
          CHALLENGE_GENERATION_FUNCTION_ARN: !Ref ChallengeGenerationFunctionArn
      Events:
        ExpressFunctionProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/challenge"
            Method: GET
      

  ExpressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../server/
      Handler: index.handler
      Runtime: nodejs14.x
      MemorySize: 512
      Role: !GetAtt ExpressFunctionRole.Arn
      Events:
        ExpressFunctionProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ExpressApi
            Path: "/{proxy+}"
            Method: ANY
      Environment:
        Variables:
          UPLOAD_IMAGE_BUCKET: !Ref UploadImageBucket
          IMAGE_CHALLENGE_NOTIFICATION_TOPIC: !Ref ImageChallengeNotificationTopic
          SNS_COMPLETE_CHALLENGE_TOPIC: !Ref SNSCompleteChallengeTopic
          SNS_PLATFORM_APPLICATION: !Ref SNSPlatformApplication
          CHALLENGE_GENERATION_FUNCTION_ARN: !Ref ChallengeGenerationFunctionArn

  ExpressEventBridge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: challengeUpdate.handler
      Runtime: nodejs14.x
      MemorySize: 512

  ExpressEventBridgeGenerateChallenge:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: challengeGenerate.handler
      Runtime: nodejs14.x
      MemorySize: 512
      Environment:
        Variables:
          CHALLENGE_GENERATION_FUNCTION_ARN: !Ref ChallengeGenerationFunctionArn

  ExpressEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Description: "Event rules for Express function for challenge updates"
      ScheduleExpression: cron(0 14 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExpressEventBridge.Arn
          Id: ExpressFunctionTarget

  ExpressEventRuleGenerateChallenge:
    Type: AWS::Events::Rule
    Properties:
      EventBusName: default
      Description: "Event rules for Express function for challenge generation"
      ScheduleExpression: cron(0 12 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ExpressEventBridge.Arn
          Id: ExpressFunctionTarget

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExpressEventBridge.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ExpressEventRule.Arn

  PermissionForEventsToInvokeLambdaGenerateChallenge:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt ExpressEventBridgeGenerateChallenge.Arn
      Action: lambda:InvokeFunction
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ExpressEventRuleGenerateChallenge.Arn



  PermissionForLambdaToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ExpressFunctionResetChallenge.Arn
      Action: lambda:InvokeFunction
      Principal: lambda.amazonaws.com
      SourceArn: !Ref ChallengeGenerationFunctionArn


Outputs:
  ExpressApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage for Express function"
    Value: !Sub "https://${ExpressApi}.execute-api.${AWS::Region}.amazonaws.com/prod"
